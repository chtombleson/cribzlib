<?xml version="1.0"?>
<class>
	<classname>CribzDatabase</classname>
	<functions>
		<function>
			<realname>__construct</realname>
			<name>Constructor</name>
			<description></description>
			<params>
				<param>@param string $driver     Database Driver</param>
				<param>@param string $host       Database Host</param>
				<param>@param string $name       Database Name</param>
				<param>@param string $user       Database User</param>
				<param>@param string $pass       Database Pass</param>
				<param>@param int    $port       Database Port (Optional)</param>
				<param>@param array  $options    Database Driver Options (Optional)</param>
			</params>
		</function>
		<function>
			<realname>connect</realname>
			<name>Connect</name>
			<description>Connect to the database</description>
			<return>@return false on error.</return>
		</function>
		<function>
			<realname>setAttribute</realname>
			<name>Set Attribute</name>
			<description></description>
			<params>
				<param>@param int $attribute PDO Attribute Option</param>
				<param>@param mixed $value   Value to set attribute to</param>
			</params>
			<return>@return true on success or fail on failure.</return>
		</function>
		<function>
			<realname>getAttribute</realname>
			<name>Get Attribute</name>
			<description>Get the value of an attribute</description>
			<params>
				<param>@param int $attribute PDO Attribute Option</param>
			</params>
			<return>@return value of attribute or false.</return>
		</function>
		<function>
			<realname>beginTransaction</realname>
			<name>Begin Transaction</name>
			<description>Start a database transaction.</description>
			<return>@return true on success or false on failure.</return>
		</function>
		<function>
			<realname>commit</realname>
			<name>Commit</name>
			<description>Commit a change to the database.</description>
			<return>@return true on success or false on failure.</return>
		</function>
		<function>
			<realname>rollBack</realname>
			<name>Roll Back</name>
			<description>Roll back a database change.</description>
			<return>@return true on success or false on failure.</return>
		</function>
		<function>
			<realname>lastInsertId</realname>
			<name>Last Insert Id</name>
			<description>Get the id for the last insert statement.</description>
			<params>
				<param>@param string $table  Name of table in database.(optional, needed for postgres &amp; mysql)</param>
				<param>@param string $field  Name of primary key field. (optional, needed for postgres &amp; mysql)</param>
			</params>
			<return>@return int of last id or false.</return>
		</function>
		<function>
			<realname>dbErrorCode</realname>
			<name>DB Error Code</name>
			<description>Get DB Error code</description>
			<return>@return db error code array.</return>
		</function>
		<function>
			<realname>dbErrorInfo</realname>
			<name>DB Error Info</name>
			<description>Get DB Error info</description>
			<return>@return db error info array.</return>
		</function>
		<function>
			<realname>debug</realname>
			<name>Debug</name>
			<description>Get a list of all errors</description>
			<return>@return list of errors</return>
		</function>
		<function>
			<realname>execute_sql</realname>
			<name>Execute Sql</name>
			<description></description>
			<params>
				<param>@param string $sql    Query to be executed</param>
				<param>@param array  $params Values to replace ? in query</param>
			</params>
			<return>@return false on error</return>
		</function>
		<function>
			<realname>lastStatementErrorCode</realname>
			<name>Last Statement Error Code</name>
			<description>Get the error code for the last statement.</description>
			<return>@return error code array for last statement.</return>
		</function>
		<function>
			<realname>lastStatementErrorInfo</realname>
			<name>Last Statement Error Info</name>
			<description>Get the error info for the last statement.</description>
			<return>@return error info array for last statement.</return>
		</function>
		<function>
			<realname>select</realname>
			<name>Select</name>
			<description></description>
			<params>
				<param>@param string $table  Table to query</param>
				<param>@param array  $where  Array of field =&gt; value for where clause (Optional)</param>
				<param>@param mixed  $fields Array or string of fields to select (Optional)</param>
				<param>@param array  $order  Array of field =&gt; order by for order clause (Optional)</param>
				<param>@param int    $limit  Limit for results (Optional)</param>
				<param>@param int    $offset Offset for records (Optional)</param>
			</params>
			<return>@return false on error</return>
		</function>
		<function>
			<realname>fetch</realname>
			<name>Fetch</name>
			<description>Fetch the next record in the set</description>
			<params>
				<param>@param int $fetch PDO Fetch Style, Default PDO::FETCH_OBJ</param>
			</params>
			<return>@return record</return>
		</function>
		<function>
			<realname>fetchAll</realname>
			<name>Fetch All</name>
			<description>Fetch All records in the set</description>
			<params>
				<param>@param int $fetch PDO Fetch Style, Default PDO::FETCH_OBJ</param>
			</params>
			<return>@return array of records</return>
		</function>
		<function>
			<realname>insert</realname>
			<name>Insert</name>
			<description></description>
			<params>
				<param>@param string $table  Table to insert record into</param>
				<param>@param mixed  $record Array or stdClass of the record you want to insert, field =&gt; value</param>
			</params>
			<return>@return false on error</return>
		</function>
		<function>
			<realname>update</realname>
			<name>Update</name>
			<description></description>
			<params>
				<param>@param string $table  Table to update</param>
				<param>@param mixed  $record Array of stdClass of the record you want to update, field =&gt; value. Must contain id field with id of record</param>
			</params>
			<return>@return false on error</return>
		</function>
		<function>
			<realname>delete</realname>
			<name>Delete</name>
			<description></description>
			<params>
				<param>@param string $table  Table to delete record from</param>
				<param>@param mixed  $where  Array of string for where clause. Array is field =&gt; value</param>
			</params>
			<return>@return false on error</return>
		</function>
		<function>
			<realname>truncate_table</realname>
			<name>Truncate Table</name>
			<description></description>
			<params>
				<param>@param string $table  Table to truncate</param>
			</params>
			<return>@return false on error</return>
		</function>
		<function>
			<realname>copy_table</realname>
			<name>Copy Table</name>
			<description></description>
			<params>
				<param>@param string $table      Table to copy from</param>
				<param>@param string $newtable   Table to copy to</param>
			</params>
			<return>@return false on error</return>
		</function>
		<function>
			<realname>drop_table</realname>
			<name>Drop Table</name>
			<description></description>
			<params>
				<param>@param string $table  Table to drop from database</param>
			</params>
			<return>@return false on error</return>
		</function>
		<function>
			<realname>create_table</realname>
			<name>Create Table</name>
			<description></description>
			<params>
				<param>@param string $name       Name of new table</param>
				<param>@param array  $tabledef   Array of column name =&gt; column definition</param>
			</params>
			<return>@return false on error</return>
		</function>
		<function>
			<realname>restore_sql_file</realname>
			<name>Restore Sql File</name>
			<description></description>
			<params>
				<param>@param string $file   Path to sql file. Sql file should be readable.</param>
			</params>
			<return>@return false on error</return>
		</function>
		<function>
			<realname>check_table_exists</realname>
			<name>Check Table Exists</name>
			<description>Check if a table exists in the database.</description>
			<params>
				<param>@param string $table  Table name to check.</param>
			</params>
			<return>@return true if table exists, false if table doesn't exists and null on error.</return>
		</function>
		<function>
			<realname>pgsql_check_table_exists</realname>
			<name>PGSQL Check Table Exists</name>
			<description>Check if a table exists in the postgres database.</description>
			<params>
				<param>@param string $table  Table name to check.</param>
			</params>
			<return>@return true if table exists, false if table doesn't exists and null on error.</return>
		</function>
		<function>
			<realname>mysql_check_table_exists</realname>
			<name>Mysql Check Table Exists</name>
			<description>Check if a table exists in the Mysql database.</description>
			<params>
				<param>@param string $table  Table name to check.</param>
			</params>
			<return>@return true if table exists, false if table doesn't exists and null on error.</return>
		</function>
		<function>
			<realname>sqlite_check_table_exists</realname>
			<name>SQLite Check Table Exists</name>
			<description>Check if a table exists in the SQLite database.</description>
			<params>
				<param>@param string $table  Table name to check.</param>
			</params>
			<return>@return true if table exists, false if table doesn't exists and null on error.</return>
		</function>
	</functions>
</class>